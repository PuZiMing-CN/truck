<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Export</name>
    </assembly>
    <members>
        <member name="T:Export.AddFunc.DictionaryAdd">
            <summary>
            字典类添加功能
            </summary>
        </member>
        <member name="M:Export.AddFunc.DictionaryAdd.KeysToList``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            键直接转换成列表
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="M:Export.AddFunc.DictionaryAdd.KeysToArray``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            键组
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="M:Export.AddFunc.DictionaryAdd.ValuesToList``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            值直接转换成列表
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="M:Export.AddFunc.DictionaryAdd.ValuesToArray``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            值组
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="M:Export.AddFunc.DictionaryAdd.Filter``2(System.Collections.Generic.Dictionary{``0,``1},System.Func{``0,``1,System.Boolean})">
            <summary>
            对字典进行过滤
            </summary>
            <typeparam name="Tkey"></typeparam>
            <typeparam name="Tvalue"></typeparam>
            <param name="dict"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Export.AddFunc.DictionaryAdd.AddOrSet``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            如果字典中不存在指定的键，则添加键值对,
            如果字典中已存在指定的键，则更新其值。
            </summary>
            <typeparam name="TKey">字典的键类型</typeparam>
            <typeparam name="TValue">字典的值类型</typeparam>
            <param name="dictionary">要操作的字典</param>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="T:Export.AddFunc.ListAdd">
            <summary>
            列表类型追加功能
            </summary>
        </member>
        <member name="M:Export.AddFunc.ListAdd.ToString``1(``0[],System.Boolean)">
            <summary>
            将列表转为字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objects"></param>
            <param name="tf"></param>
            <returns></returns>
        </member>
        <member name="M:Export.AddFunc.ListAdd.ToString``1(System.Collections.Generic.List{``0},System.Boolean)">
            <summary>
            将列表转为字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ts"></param>
            <param name="tf"></param>
            <returns></returns>
        </member>
        <member name="M:Export.AddFunc.ListAdd.Join``1(System.Collections.Generic.List{``0},System.String)">
            <summary>
            连接
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ts"></param>
            <param name="add"></param>
            <returns></returns>
        </member>
        <member name="M:Export.AddFunc.ListAdd.Join``1(``0[],System.String)">
            <summary>
            连接
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ts"></param>
            <param name="add"></param>
            <returns></returns>
        </member>
        <member name="M:Export.AddFunc.ListAdd.Join``1(System.Collections.Generic.IEnumerator{``0},System.String)">
            <summary>
            连接
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ts"></param>
            <param name="add"></param>
            <returns></returns>
        </member>
        <member name="M:Export.AddFunc.ListAdd.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            连接
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ts"></param>
            <param name="add"></param>
            <returns></returns>
        </member>
        <member name="M:Export.AddFunc.ListAdd.Join``1(System.Collections.Generic.List{System.Collections.Generic.List{``0}})">
            <summary>
            将列表平铺
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Export.AddFunc.ListAdd.Amplify``2(System.Collections.Generic.List{``0},System.Func{``0,``1})">
            <summary>
            将列表进行转换
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="R"></typeparam>
            <param name="ts"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Export.AddFunc.ListAdd.Map``2(System.Collections.Generic.List{``0},System.Func{``0,System.Int32,``1})">
            <summary>
            将列表遍历转换
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="R"></typeparam>
            <param name="ts"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Export.AddFunc.ListAdd.ForEach``1(System.Collections.Generic.List{``0},System.Action{``0,System.Int32})">
            <summary>
            对List的每个元素进行指定操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ts"></param>
            <param name="action"></param>
        </member>
        <member name="M:Export.AddFunc.ListAdd.ReverseThis``1(System.Collections.Generic.List{``0})">
            <summary>
            反转当前这个列表顺序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ts"></param>
            <returns></returns>
        </member>
        <member name="M:Export.AddFunc.ListAdd.ToDict``1(System.Collections.Generic.List{``0})">
            <summary>
            转为字典
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ts"></param>
            <returns></returns>
        </member>
        <member name="M:Export.AddFunc.ListAdd.ToDict``2(System.Collections.Generic.List{``1},System.Func{``1,``0})">
            <summary>
            转为字典
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="ts"></param>
            <param name="getKey">获取Key方法</param>
            <returns></returns>
        </member>
        <member name="T:Export.Attribute.ReadOnlyAttribute">
            <summary>
            编辑器只读(内容无法在在编辑器中修改)
            </summary>
        </member>
        <member name="T:Export.Attribute.Editor.ReadOnlyAttributeDrawer">
            <summary>
            只读状态绘制
            </summary>
        </member>
        <member name="M:Export.Attribute.Editor.ReadOnlyAttributeDrawer.OnGUI(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
            <summary>
            重写OnGUI
            </summary>
            <param name="position"></param>
            <param name="property"></param>
            <param name="label"></param>
        </member>
        <member name="T:Export.Attribute.ReadOnlyTextAreaAttribute">
            <summary>
            允许内容以只读的方式进行多行显示
            </summary>
        </member>
        <member name="P:Export.Attribute.ReadOnlyTextAreaAttribute.minLines">
            <summary>
            最小行数
            </summary>
        </member>
        <member name="P:Export.Attribute.ReadOnlyTextAreaAttribute.maxLines">
            <summary>
            最大行数
            </summary>
        </member>
        <member name="M:Export.Attribute.ReadOnlyTextAreaAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            只读文字区域构造函数
            </summary>
            <param name="minLines"></param>
            <param name="maxLines"></param>
        </member>
        <member name="M:Export.Attribute.ReadOnlyTextAreaAttribute.#ctor">
            <summary>
            只读文字区域构造函数
            </summary>
        </member>
        <member name="T:Export.BehaviourEX.NrealBehaviour">
            <summary>
            专门设计给Nreal项目用
            <br />
            放弃继承此类需要放弃使用Start和Update以防止出错
            </summary>
        </member>
        <member name="F:Export.BehaviourEX.NrealBehaviour.NRINPUT">
            <summary>
            NRInput对象名称
            </summary>
        </member>
        <member name="F:Export.BehaviourEX.NrealBehaviour.NRINPUT_RIGHT">
            <summary>
            NRInput右摇杆控制器名称
            </summary>
        </member>
        <member name="F:Export.BehaviourEX.NrealBehaviour.NR_VIRTUAL_DISPLAYER">
            <summary>
            NRInput手机屏幕名称
            </summary>
        </member>
        <member name="F:Export.BehaviourEX.NrealBehaviour.NR_CAMERA_RIG">
            <summary>
            NR摄像头对象
            </summary>
        </member>
        <member name="F:Export.BehaviourEX.NrealBehaviour.MAX_ERROR_TIMES">
            <summary>
            最大重试次数
            </summary>
        </member>
        <member name="F:Export.BehaviourEX.NrealBehaviour.WAIT_ERROR_TIME">
            <summary>
            重试等待时间
            <br />
            (单位：秒)
            </summary>
        </member>
        <member name="F:Export.BehaviourEX.NrealBehaviour.nrInput">
            <summary>
            NRInput对象
            </summary>
        </member>
        <member name="F:Export.BehaviourEX.NrealBehaviour.nrInputRight">
            <summary>
            NRInput
            右摇杆控制器
            </summary>
        </member>
        <member name="F:Export.BehaviourEX.NrealBehaviour.nrVirtualDisplayer">
            <summary>
            NRInput手机屏幕对象
            </summary>
        </member>
        <member name="F:Export.BehaviourEX.NrealBehaviour.nrCameraRig">
            <summary>
            Nreal摄像头
            </summary>
        </member>
        <member name="P:Export.BehaviourEX.NrealBehaviour.NRInput">
            <summary>
            NRInput对象
            </summary>
        </member>
        <member name="P:Export.BehaviourEX.NrealBehaviour.NRInputRight">
            <summary>
            NRInput
            右遥感控制器
            </summary>
        </member>
        <member name="P:Export.BehaviourEX.NrealBehaviour.NRVirtualDisplayer">
            <summary>
            NRInput手机屏幕对象
            </summary>
        </member>
        <member name="P:Export.BehaviourEX.NrealBehaviour.NRCameraRig">
            <summary>
            Nreal摄像头
            </summary>
        </member>
        <member name="M:Export.BehaviourEX.NrealBehaviour.Find(System.String,UnityEngine.GameObject)">
            <summary>
            根据名称查找父对象下的对象
            </summary>
            <param name="objName">对象名称</param>
            <param name="parent">父对象</param>
            <returns></returns>
        </member>
        <member name="M:Export.BehaviourEX.NrealBehaviour.Find(System.String)">
            <summary>
            查找右摇杆下的对象
            </summary>
            <param name="objName"></param>
            <returns></returns>
        </member>
        <member name="F:Export.BehaviourEX.NrealBehaviour.StartErrorList">
            <summary>
            启动错误列表
            </summary>
        </member>
        <member name="F:Export.BehaviourEX.NrealBehaviour.errorTimes">
            <summary>
            启动错误次数
            </summary>
        </member>
        <member name="F:Export.BehaviourEX.NrealBehaviour.nrealToolsIsInit">
            <summary>
            当前模块是否启动
            </summary>
        </member>
        <member name="P:Export.BehaviourEX.NrealBehaviour.NrealToolsIsInit">
            <summary>
            当前模块是否启动
            </summary>
        </member>
        <member name="M:Export.BehaviourEX.NrealBehaviour.GetStartErrorList">
            <summary>
            获取启动错误列表
            </summary>
            <remarks>
            如果想要添加加载项，请修改此函数
            </remarks>
        </member>
        <member name="M:Export.BehaviourEX.NrealBehaviour.WaitNRInputInit">
            <summary>
            等待NRInput初始化完成<br />
            运行结束时会调用NewStart
            </summary>
            <returns></returns>
        </member>
        <member name="M:Export.BehaviourEX.NrealBehaviour.Start">
            <summary>
            此方法已经被废弃<br />
            请使用NewStart
            </summary>
        </member>
        <member name="M:Export.BehaviourEX.NrealBehaviour.NewStart">
            <summary>
            让继承此类的代码放弃使用Start
            转而使用NewStart
            </summary>
            <remarks>
            此函数会在等待NRInput模块加载完或者超过最大重试次数后运行<br />
            只在第一帧运行一次
            </remarks>
        </member>
        <member name="M:Export.BehaviourEX.NrealBehaviour.Update">
            <summary>
            此方法已经被弃用
            请使用NewUpdate
            </summary>
        </member>
        <member name="M:Export.BehaviourEX.NrealBehaviour.NewUpdate">
            <summary>
            让继承此类的代码放弃使用Update
            转为使用NewUpdate
            </summary>
            <remarks>
            此函数会在等待NRInput模块加载完或者超过最大重试次数后运行<br />
            每帧运行一次
            </remarks>
        </member>
        <member name="M:Export.BehaviourEX.NrealBehaviour.OnDestroy">
            <summary>
            此方法已经被废弃<br />
            请使用OnNewDestroy
            </summary>
            <remarks>
            添加对象时,这里也需要修改
            </remarks>
        </member>
        <member name="M:Export.BehaviourEX.NrealBehaviour.OnNewDestroy">
            <summary>
            让继承此类的代码放弃使用OnDestroy
            转而使用OnNewDestroy
            </summary>
        </member>
        <member name="T:Export.BehaviourEX.NrealBehaviourAdd">
            <summary>
            NrealBehaviour追加方法
            </summary>
        </member>
        <member name="M:Export.BehaviourEX.NrealBehaviourAdd.Length``1(System.Collections.Generic.List{``0})">
            <summary>
            获取列表长度
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Export.BehaviourEX.NrealBehaviourAdd.ForEach``1(System.Collections.Generic.List{``0},System.Action{``0,System.Int32})">
            <summary>
            遍历执行
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="action"></param>
        </member>
        <member name="M:Export.BehaviourEX.NrealBehaviourAdd.Join``1(System.Collections.Generic.List{``0},System.String)">
            <summary>
            将列表连接成字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="conconnectionString"></param>
            <returns></returns>
        </member>
        <member name="M:Export.BehaviourEX.NrealBehaviourAdd.Map``2(System.Collections.Generic.List{``0},System.Func{``0,System.Int32,``1})">
            <summary>
            对列表中的每个元素执行给定的转换操作，并返回一个包含转换结果的新列表。
            </summary>
            <typeparam name="T">列表中元素的类型。</typeparam>
            <typeparam name="R">转换操作的结果类型。</typeparam>
            <param name="list">要进行转换的源列表。</param>
            <param name="getReturn">一个转换函数，它接受列表中的元素（类型为 T）和元素的索引（int），返回转换后的结果（类型为 R）。</param>
            <returns>一个新的列表，包含源列表中每个元素经过转换函数处理后的结果。</returns>
        </member>
        <member name="M:Export.BehaviourEX.NrealBehaviourAdd.Map``2(System.Collections.Generic.List{``0},System.Func{``0,``1})">
            <summary>
            对列表中的每个元素执行给定的转换操作，并返回一个包含转换结果的新列表。
            </summary>
            <typeparam name="T">列表中元素的类型。</typeparam>
            <typeparam name="R">转换操作的结果类型。</typeparam>
            <param name="list">要进行转换的源列表。</param>
            <param name="getReturn">一个转换函数，它接受列表中的元素（类型为 T），返回转换后的结果（类型为 R）。</param>
            <returns>一个新的列表，包含源列表中每个元素经过转换函数处理后的结果。</returns>
        </member>
        <member name="M:Export.BehaviourEX.NrealBehaviourAdd.Filter``1(System.Collections.Generic.List{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            对列表进行过滤，根据提供的条件函数选择元素。
            </summary>
            <typeparam name="T">列表中元素的类型。</typeparam>
            <param name="list">要进行过滤的源列表。</param>
            <param name="isFilter">过滤函数，它接受列表中的元素（类型为 T）和元素的索引（int），并返回一个布尔值，指示是否应该包含当前元素。</param>
            <returns>一个新的列表，仅包含满足过滤条件的元素。</returns>
        </member>
        <member name="M:Export.BehaviourEX.NrealBehaviourAdd.Filter``1(System.Collections.Generic.List{``0},System.Func{``0,System.Boolean})">
            <summary>
            对列表进行过滤，根据提供的条件函数选择元素。
            </summary>
            <typeparam name="T">列表中元素的类型。</typeparam>
            <param name="list">要进行过滤的源列表。</param>
            <param name="isFilter">过滤函数，它接受列表中的元素（类型为 T），并返回一个布尔值，指示是否应该包含当前元素。</param>
            <returns>一个新的列表，仅包含满足过滤条件的元素。</returns>
        </member>
        <member name="M:Export.BehaviourEX.NrealBehaviourAdd.GetOnlyOne``1(System.Collections.Generic.List{``0})">
            <summary>
            从泛型列表中获取第一个符合特定条件的元素。这些条件包括不是 null、不是空字符串、
            对于数值类型不是 0、不是 NaN、不是无穷大。
            </summary>
            <typeparam name="T">列表中元素的类型。</typeparam>
            <param name="list">要检查的源列表。</param>
            <returns>
            返回列表中的第一个符合条件的元素。如果没有找到符合条件的元素，返回类型 T 的默认值。
            对于数值类型，检查元素是否为 0、NaN 或无穷大；对于字符串，检查是否为空字符串。
            </returns>
        </member>
        <member name="M:Export.BehaviourEX.NrealBehaviourAdd.Range``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            生成列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Export.BehaviourEX.NrealBehaviourAdd.Range``1(System.Collections.Generic.List{``0},System.Int32,System.Int32)">
            <summary>
            生成列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Export.BehaviourEX.NrealBehaviourAdd.Range``1(System.Collections.Generic.List{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            生成列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="step"></param>
            <returns></returns>
        </member>
        <member name="T:Export.BehaviourEX.UUIDBehavior">
            <summary>
            通用单一标识符
            </summary>
        </member>
        <member name="F:Export.BehaviourEX.UUIDBehavior.random">
            <summary>
            全局静态随机数
            用于生成UUID
            </summary>
        </member>
        <member name="P:Export.BehaviourEX.UUIDBehavior.UUID">
            <summary>
            UUID
            </summary>
        </member>
        <member name="T:Export.BehaviourEX.Dispatcher">
            <summary>
            UnityMainThreadDispatcher
            简单的 Unity 主线程调度器
            它允许你安排方法在主线程上执行
            </summary>
        </member>
        <member name="F:Export.BehaviourEX.Dispatcher._executionQueue">
            <summary>
            定义一个静态的、只读的动作队列，用于储存需要在主线程上执行的动作。
            这个队列是线程安全的，因为我们在操作它时使用了 lock 语句来保证线程安全。
            </summary>
        </member>
        <member name="M:Export.BehaviourEX.Dispatcher.Upgrate">
            <summary>
            执行线程上的操作
            </summary>
        </member>
        <member name="M:Export.BehaviourEX.Dispatcher.InvokeOnMainThread(System.Action)">
            <summary>
            这个静态方法允许其他线程安排动作在主线程上执行
            这是通过把动作加到 _executionQueue 队列中实现的
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Export.BehaviourEX.Dispatcher.Invoke(System.Action)">
            <summary>
            这个静态方法允许其他线程安排动作在主线程上执行
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:Export.Class.DictionaryEX`2">
            <summary>
            增强字典类
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Export.Class.DictionaryEX`2.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Export.Class.DictionaryEX`2.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
            <summary>
            构造函数
            </summary>
            <param name="dict"></param>
        </member>
        <member name="M:Export.Class.DictionaryEX`2.#ctor(`0[],`1[])">
            <summary>
            构造函数
            </summary>
            <param name="keys"></param>
            <param name="values"></param>
        </member>
        <member name="M:Export.Class.DictionaryEX`2.#ctor(System.Collections.Generic.List{`0},System.Collections.Generic.List{`1})">
            <summary>
            构造函数
            </summary>
            <param name="keys"></param>
            <param name="values"></param>
        </member>
        <member name="P:Export.Class.DictionaryEX`2.Item(`0)">
            <summary>
            获取或设置与指定的键关联的值
            </summary>
            <param name="key">要获取或设置的值的键。</param>
            <returns>与指定的键相关联的值。 如果指定键未找到，则 Get 操作引发 System.Collections.Generic.KeyNotFoundException，而 Set 操作创建一个带指定键的新元素。</returns>
            <exception cref="T:System.ArgumentNullException">key 为 null</exception>
        </member>
        <member name="M:Export.Class.DictionaryEX`2.ToString">
            <summary>
            默认的 ToString 方法，返回字典的字符串表示。
            </summary>
            <returns>字典的字符串表示。</returns>
        </member>
        <member name="M:Export.Class.DictionaryEX`2.ToString(System.Int32)">
            <summary>
            带有缩进的 ToString 方法，根据给定的缩进值返回字典的字符串表示。
            </summary>
            <param name="indentation">缩进的空格数。</param>
            <returns>字典的字符串表示。</returns>
        </member>
        <member name="M:Export.Class.DictionaryEX`2.ToString(System.Int32,System.Boolean)">
            <summary>
            带有缩进和简洁名称选项的 ToString 方法，返回字典的字符串表示。
            </summary>
            <param name="indentation">缩进的空格数。</param>
            <param name="isSimple">是否使用简洁类名（默认为true）。</param>
            <returns>字典的字符串表示。</returns>
        </member>
        <member name="M:Export.Class.DictionaryEX`2.ToString(System.Int32,System.String)">
            <summary>
            带有缩进和自定义类型名称的 ToString 方法，返回字典的字符串表示。
            </summary>
            <param name="indentation">缩进的空格数。</param>
            <param name="dictionaryName">字典的自定义名称。</param>
            <returns>字典的字符串表示。</returns>
        </member>
        <member name="M:Export.Class.DictionaryEX`2.ToString(System.Int32,System.Boolean,System.Type)">
            <summary>
            带有缩进、简洁名称和类型的 ToString 方法，返回字典的字符串表示。
            </summary>
            <param name="indentation">缩进的空格数。</param>
            <param name="isSimple">是否使用简洁类名（默认为true）。</param>
            <param name="type">字典类型。</param>
            <returns>字典的字符串表示。</returns>
        </member>
        <member name="M:Export.Class.DictionaryEX`2.ToString(System.Int32,System.Boolean,System.String)">
            <summary>
            核心的 ToString 方法，格式化字典的字符串表示。
            </summary>
            <param name="indentation">缩进的空格数。</param>
            <param name="isSimple">是否使用简洁类名（默认为true）。</param>
            <param name="dictionaryName">字典的自定义名称。</param>
            <returns>字典的字符串表示。</returns>
        </member>
        <member name="M:Export.Class.DictionaryEX`2.FormatValue(System.Object,System.Int32,System.Boolean)">
            <summary>
            格式化字典中的值，根据不同类型的值返回相应的字符串表示。
            </summary>
            <param name="value">字典中的值。</param>
            <param name="indentation">缩进的空格数。</param>
            <param name="isSimple">是否使用简洁类名（默认为true）。</param>
            <returns>格式化后的值的字符串表示。</returns>
        </member>
        <member name="T:Export.Class.DictionaryEXAdd">
            <summary>
            本地化存储追加类
            </summary>
        </member>
        <member name="M:Export.Class.DictionaryEXAdd.ToSave(Export.Class.DictionaryEX{System.String,System.Boolean})">
            <summary>
            重写转为字符串
            </summary>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="M:Export.Class.DictionaryEXAdd.ToSave(Export.Class.DictionaryEX{System.String,System.Int32})">
            <summary>
            重写转为字符串
            </summary>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="M:Export.Class.DictionaryEXAdd.ToSave(Export.Class.DictionaryEX{System.String,System.String})">
            <summary>
            重写转为字符串
            </summary>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="M:Export.Class.DictionaryEXAdd.ToSave(System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            重写转为字符串
            </summary>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="M:Export.Class.DictionaryEXAdd.ToSave(System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            重写转为字符串
            </summary>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="M:Export.Class.DictionaryEXAdd.ToSave(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            重写转为字符串
            </summary>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="M:Export.Class.DictionaryEXAdd.FromBoolDict(System.String)">
            <summary>
            读取字典格式数据
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Export.Class.DictionaryEXAdd.FromIntDict(System.String)">
            <summary>
            读取字典格式数据
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Export.Class.DictionaryEXAdd.FromStringDict(System.String)">
            <summary>
            读取字典格式数据
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Export.Class.DictionaryEXAdd.FromBoolDictEX(System.String)">
            <summary>
            读取字典格式数据
            转换成增强格式字典
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Export.Class.DictionaryEXAdd.FromIntDictEX(System.String)">
            <summary>
            读取字典格式数据
            转换成增强格式字典
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Export.Class.DictionaryEXAdd.FromStringDictEX(System.String)">
            <summary>
            读取字典格式数据
            转换成增强格式字典
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Export.Class.DictionaryEXAdd.ToString``2(System.Collections.Generic.Dictionary{``0,``1},System.Boolean)">
            <summary>
            重载ToString
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dict"></param>
            <param name="tf"></param>
            <returns></returns>
        </member>
        <member name="M:Export.Class.DictionaryEXAdd.ToDictionaryEX``2(System.Collections.Generic.List{``0},System.Func{``0,``1})">
            <summary>
            添加了转为增强型字典的函数
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="R"></typeparam>
            <param name="ts"></param>
            <param name="getKey"></param>
            <returns></returns>
        </member>
        <member name="M:Export.Class.DictionaryEXAdd.ToDictionaryEX``2(System.Collections.Generic.List{``0},System.Func{``0,System.Int32,``1})">
            <summary>
            添加了转为增强型字典的函数
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="R"></typeparam>
            <param name="ts"></param>
            <param name="getKey"></param>
            <returns></returns>
        </member>
        <member name="M:Export.Class.DictionaryEXAdd.ForEach``2(Export.Class.DictionaryEX{``0,``1},System.Action{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            将字典中每个键值对进行遍历操作
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dict"></param>
            <param name="action"></param>
        </member>
        <member name="M:Export.Class.DictionaryEXAdd.ForEach``2(Export.Class.DictionaryEX{``0,``1},System.Action{``0,``1})">
            <summary>
            将字典中的每个键值对进行遍历操作
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dict"></param>
            <param name="action">操作方法</param>
        </member>
        <member name="M:Export.Class.DictionaryEXAdd.ForEach``2(Export.Class.DictionaryEX{``0,``1},System.Action{``0,``1,System.Int32})">
            <summary>
            将字典中的每个键值对进行遍历操作
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dict"></param>
            <param name="action"></param>
        </member>
        <member name="M:Export.Class.DictionaryEXAdd.Map``4(Export.Class.DictionaryEX{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},System.Collections.Generic.KeyValuePair{``2,``3}})">
            <summary>
            将字典中的每个键对值进行操作并转换
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <typeparam name="RKey"></typeparam>
            <typeparam name="RValue"></typeparam>
            <param name="dict"></param>
            <param name="func">操作方法</param>
            <returns></returns>
        </member>
        <member name="M:Export.Class.DictionaryEXAdd.Map``4(Export.Class.DictionaryEX{``0,``1},System.Func{``0,``1,System.Collections.Generic.KeyValuePair{``2,``3}})">
            <summary>
            将字典中的每个键对值进行操作并转换
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <typeparam name="RKey"></typeparam>
            <typeparam name="RValue"></typeparam>
            <param name="dict"></param>
            <param name="func">操作方法</param>
            <returns></returns>
        </member>
        <member name="M:Export.Class.DictionaryEXAdd.Map``4(Export.Class.DictionaryEX{``0,``1},System.Func{``0,``1,System.Int32,System.Collections.Generic.KeyValuePair{``2,``3}})">
            <summary>
            将字典中的每个键对值进行操作并转换
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <typeparam name="RKey"></typeparam>
            <typeparam name="RValue"></typeparam>
            <param name="dict"></param>
            <param name="func">操作方法</param>
            <returns></returns>
        </member>
        <member name="M:Export.Class.DictionaryEXAdd.Map``4(Export.Class.DictionaryEX{``0,``1},System.Func{System.ValueTuple{``0,``1},System.ValueTuple{``2,``3}})">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <typeparam name="RKey"></typeparam>
            <typeparam name="RValue"></typeparam>
            <param name="dict"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Export.Class.DictionaryEXAdd.Map``4(Export.Class.DictionaryEX{``0,``1},System.Func{``0,``1,System.ValueTuple{``2,``3}})">
            <summary>
            将字典中的每个键对值进行操作并转换
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <typeparam name="RKey"></typeparam>
            <typeparam name="RValue"></typeparam>
            <param name="dict"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Export.Class.DictionaryEXAdd.Map``4(Export.Class.DictionaryEX{``0,``1},System.Func{``0,``1,System.Int32,System.ValueTuple{``2,``3}})">
            <summary>
            将字典中的每个键对值进行操作并转换
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <typeparam name="RKey"></typeparam>
            <typeparam name="RValue"></typeparam>
            <param name="dict"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="T:Export.Editor.MessageButton">
            <summary>
            自定义消息代码块在检查器中的界面
            </summary>
        </member>
        <member name="F:Export.Editor.MessageButton.value">
            <summary>
            输入内容
            </summary>
        </member>
        <member name="T:Export.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Export.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Export.Properties.Resources.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Export.Properties.Resources.favicon">
            <summary>
              查找类似于 (图标) 的 System.Drawing.Icon 类型的本地化资源。
            </summary>
        </member>
        <member name="F:Export.ExportWindow.allGameObjects">
            <summary>
            当前场景的所有对象
            </summary>
        </member>
        <member name="F:Export.ExportWindow.nowScroll">
            <summary>
            当前滚轮
            </summary>
        </member>
        <member name="F:Export.ExportWindow.IgnoreList">
            <summary>
            忽视列表
            </summary>
        </member>
        <member name="M:Export.ExportWindow.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Export.ExportWindow.AllGameObjects">
            <summary>
            读取所有物体
            </summary>
        </member>
        <member name="M:Export.ExportWindow.SelectGameObjects">
            <summary>
            筛选部分物体
            </summary>
        </member>
        <member name="M:Export.ExportWindow.Export(System.Boolean,System.Boolean)">
            <summary>
            导出当前场景
            </summary>
            <param name="copyMaterial">是否拷贝贴图</param>
            <param name="copyTexture">是否拷贝纹理</param>
        </member>
        <member name="M:Export.ExportWindow.DeleteMeta(System.String)">
            <summary>
            删除所有的Meta文件
            </summary>
        </member>
        <member name="M:Export.ExportWindow.CopyFilesTo(System.String,System.String)">
            <summary>
            将文件拷贝
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="T:Export.ExportWindowAdd">
            <summary>
            导出窗口追加函数
            </summary>
        </member>
        <member name="M:Export.ExportWindowAdd.POP``1(``0[])">
            <summary>
            删除最后一个对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Export.ExportWindowAdd.MyRemoveAt``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            移除指定Index的对象并返回自身
            </summary>
            <typeparam name="R"></typeparam>
            <param name="list"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Export.ExportWindowAdd.Join(System.String[],System.String)">
            <summary>
            将数组连接成字符串
            </summary>
            <param name="array"></param>
            <param name="add"></param>
            <returns></returns>
        </member>
        <member name="M:Export.ExportWindowAdd.RemoveByName(UnityEngine.GameObject[],System.String[])">
            <summary>
            移除带有名称的对象
            </summary>
            <param name="gameObjects"></param>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:Export.ExportWindowAdd.RemoveByName(UnityEngine.GameObject[],System.Collections.Generic.List{System.String})">
            <summary>
            移除带有名称的对象
            </summary>
            <param name="gameObjects"></param>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="T:Export.Record2">
            <summary>
            录制功能2
            </summary>
        </member>
        <member name="P:Export.Record2.INIPATH">
            <summary>
            配置文件位置
            </summary>
        </member>
        <member name="F:Export.Record2.ffmpegPath">
            <summary>
            ffmpeg.exe位置
            </summary>
        </member>
        <member name="P:Export.Record2.FFMPEGPATH">
            <summary>
            ffmpeg.exe位置
            </summary>
        </member>
        <member name="F:Export.Record2.savePath">
            <summary>
            视频保存位置
            </summary>
        </member>
        <member name="P:Export.Record2.readPath">
            <summary>
            读取ffmpeg.exe的位置
            </summary>
        </member>
        <member name="F:Export.Record2.recordProcess">
            <summary>
            录制进程
            </summary>
        </member>
        <member name="M:Export.Record2.#ctor">
            <summary>
            初始化录制模块
            </summary>
        </member>
        <member name="M:Export.Record2.#ctor(System.String)">
            <summary>
            初始化录制模块
            </summary>
            <param name="savePath">录制文件保存位置</param>
        </member>
        <member name="M:Export.Record2.#ctor(System.String,System.String)">
            <summary>
            初始化录制文件
            </summary>
            <param name="savePath"></param>
            <param name="ffmpegPath"></param>
        </member>
        <member name="M:Export.Record2.SetFFMPEG(System.String)">
            <summary>
            设置ffmpeg.exe的位置
            </summary>
            <param name="ffmpegPath"></param>
        </member>
        <member name="M:Export.Record2.SetPATH(System.String)">
            <summary>
            设置视频保存位置
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Export.Record2.Save">
            <summary>
            保存数据
            </summary>
        </member>
        <member name="M:Export.Record2.Start">
            <summary>
            开始录制
            </summary>
        </member>
        <member name="M:Export.Record2.Start(System.String)">
            <summary>
            开始录制
            </summary>
        </member>
        <member name="M:Export.Record2.Stop">
            <summary>
            停止录制进程
            </summary>
        </member>
        <member name="M:Export.Record2.KillFFMPEG">
            <summary>
            关闭ffmpeg
            </summary>
        </member>
        <member name="F:Export.RecordWindow.Path">
            <summary>
            录制位置
            </summary>
        </member>
        <member name="F:Export.RecordWindow.record2">
            <summary>
            录制模块
            </summary>
        </member>
        <member name="F:Export.RecordWindow.FFMPEG">
            <summary>
            Accord.Video.FFMPEG模块是否加载
            </summary>
        </member>
        <member name="F:Export.RecordWindow.FFMPEGEXE">
            <summary>
            ffmpeg.exe模块是否加载
            </summary>
        </member>
        <member name="F:Export.RecordWindow.FFMPEGEXEPATH">
            <summary>
            ffmpeg.exe模块位置
            </summary>
        </member>
        <member name="F:Export.RecordWindow.window">
            <summary>
            页面
            </summary>
        </member>
        <member name="M:Export.RecordWindow.Record">
            <summary>
            录制
            </summary>
        </member>
        <member name="M:Export.RecordWindow.CanRecord">
            <summary>
            判断是否能录制
            </summary>
            <returns></returns>
        </member>
        <member name="M:Export.RecordWindow.Record2">
            <summary>
            录制
            </summary>
        </member>
        <member name="M:Export.RecordWindow.CanRecord2">
            <summary>
            判断是否能录制
            </summary>
            <returns></returns>
        </member>
        <member name="T:Export.Tools.CodingMode">
            <summary>
            编码加密方式
            </summary>
        </member>
        <member name="F:Export.Tools.CodingMode.NoCoding">
            <summary>
            没有加密
            </summary>
        </member>
        <member name="F:Export.Tools.CodingMode.SHA256">
            <summary>
            SHA256加密
            </summary>
        </member>
        <member name="F:Export.Tools.CodingMode.MD5">
            <summary>
            双层MD5加密
            </summary>
        </member>
        <member name="T:Export.Tools.Base64">
            <summary>
            base64类
            </summary>
        </member>
        <member name="F:Export.Tools.Base64._keyStr">
            <summary>
            base64原始密匙
            </summary>
        </member>
        <member name="M:Export.Tools.Base64._utf8_encode(System.String)">
            <summary>
            将输入内容以utf-8编码
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Export.Tools.Base64._utf8_decode(System.String)">
            <summary>
            将utf8编码的内容解码
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Export.Tools.Base64.Encode(System.String)">
            <summary>
            base64加密
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Export.Tools.Base64.Decode(System.String)">
            <summary>
            base64解密
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Export.Tools.Base64.RandomKey">
            <summary>
            获取随机密匙
            </summary>
            <returns></returns>
        </member>
        <member name="M:Export.Tools.Base64.Encode(System.String,System.String)">
            <summary>
            base64编码
            使用特殊密匙
            </summary>
            <param name="input"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Export.Tools.Base64.Decode(System.String,System.String)">
            <summary>
            base64解码
            使用特殊密匙
            </summary>
            <param name="input"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Export.Tools.Base64.GetKey">
            <summary>
            获取密匙
            </summary>
            <returns></returns>
        </member>
        <member name="M:Export.Tools.Base64.GetKey(System.String)">
            <summary>
            获取密匙
            (默认SHA256)
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Export.Tools.Base64.GetKey(System.String,Export.Tools.CodingMode)">
            <summary>
            获取密匙
            </summary>
            <param name="input"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="T:Export.Tools.Base64Add">
            <summary>
            base64类追加函数
            </summary>
        </member>
        <member name="M:Export.Tools.Base64Add.GetChar(System.String,System.Int32)">
            <summary>
            获取一个字符对象编码值
            </summary>
            <param name="str"></param>
            <param name="index">指针</param>
            <returns></returns>
        </member>
        <member name="M:Export.Tools.Base64Add.OR(System.Nullable{System.Int32},System.Int32)">
            <summary>
            或者
            </summary>
            <param name="num"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Export.Tools.Base64Add.GetRandomOne``1(System.Collections.Generic.List{``0},System.Boolean)">
            <summary>
            随机取出一个对象
            </summary>
            <param name="list"></param>
            <param name="isDelete">是否删除</param>
            <returns></returns>
        </member>
        <member name="M:Export.Tools.Base64Add.GetRandomOne``1(System.Collections.Generic.List{``0})">
            <summary>
            随机取出一个对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="T:Export.Tools.Item">
            <summary>
            工具类
            </summary>
        </member>
        <member name="F:Export.Tools.Item.ChousePath">
            <summary>
            选择的文件夹路径
            </summary>
        </member>
        <member name="M:Export.Tools.Item.SHA256(System.String)">
            <summary>
            SHA256签名
            (不适用于签名中文内容,中文加密和js上的加密不同)
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Export.Tools.Item.MD5(System.String)">
            <summary>
            MD5签名
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Export.Tools.Item.MD5(System.Byte[])">
            <summary>
            MD5签名
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Export.Tools.Item.NewUUID">
            <summary>
            新建一个UID
            </summary>
            <returns></returns>
        </member>
        <member name="M:Export.Tools.Item.NewUUID(System.String)">
            <summary>
            新建一个UID
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Export.Tools.Item.ChoiceFolder(System.String@,System.String)">
            <summary>
            选择文件夹
            </summary>
            <param name="label">选择文件夹地址</param>
            <param name="tishi">选择时候提示内容</param>
        </member>
        <member name="M:Export.Tools.Item.ChoiceFolder(System.String@,System.String,System.String)">
            <summary>
            选择文件夹
            </summary>
            <param name="label">选择文件夹地址</param>
            <param name="tishi">选择时候提示内容</param>
            <param name="path">已经存在的文件路径</param>
        </member>
        <member name="M:Export.Tools.Item.ChoiceFolder(System.String@,System.String,System.Environment.SpecialFolder)">
            <summary>
            选择文件夹
            </summary>
            <param name="label">选择文件夹地址</param>
            <param name="tishi">选择时候提示内容</param>
            <param name="folder">系统文件夹枚举项</param>
        </member>
        <member name="M:Export.Tools.Item.ChoiceFile(System.String@,System.String,System.Environment.SpecialFolder,System.String)">
            <summary>
            选择指定文件
            </summary>
            <param name="label"></param>
            <param name="tishi">选择时候提示内容</param>
            <param name="folder">系统文件夹枚举项</param>
            <param name="name">限定文件</param>
        </member>
        <member name="M:Export.Tools.Item.Log(System.String)">
            <summary>
            打印内容
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Export.Tools.Item.ChoiceFile(System.String@,System.String,System.String,System.String)">
            <summary>
            选择指定文件
            </summary>
            <param name="label"></param>
            <param name="tishi">选择时候提示内容</param>
            <param name="folder">系统文件夹枚举项</param>
            <param name="name">限定文件</param>
        </member>
        <member name="M:Export.Tools.Item.UseCmd(System.String)">
            <summary>
            使用cmd命令
            </summary>
            <param name="cmdCode"></param>
        </member>
        <member name="M:Export.Tools.Item.IsAssemblyLoaded(System.String)">
            <summary>
            判断dll是否能用
            </summary>
            <param name="assemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:Export.Tools.Item.GetDllPath(System.String)">
            <summary>
            获取dll位置
            找不到会报错
            </summary>
            <param name="assemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:Export.Tools.Item.OpenOnWindows(System.String)">
            <summary>
            打开网站|其他东西
            </summary>
            <param name="web">网址|地址</param>
        </member>
        <member name="M:Export.Tools.Item.OpenFile(System.String)">
            <summary>
            打开文件
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Export.Tools.Item.CreateRegex(System.String)">
            <summary>
            根据INI内容创建regex对象
            </summary>
            <param name="iniValue"></param>
            <returns></returns>
        </member>
        <member name="M:Export.Tools.Item.RegexToIni(System.Text.RegularExpressions.Regex)">
            <summary>
            将regex对象转为ini内容
            </summary>
            <param name="regex"></param>
            <returns></returns>
        </member>
        <member name="M:Export.Tools.Item.GetInput(System.Action{System.String})">
            <summary>
            获取输入
            </summary>
            <param name="callBack">回调函数</param>
            <returns></returns>
        </member>
        <member name="M:Export.Tools.Item.GetInput(System.String,System.Action{System.String})">
            <summary>
            获取输入
            </summary>
            <param name="tishi">输入框提示</param>
            <param name="callBack">回调函数</param>
            <returns></returns>
        </member>
        <member name="M:Export.Tools.Item.GetInput(System.String,System.String,System.Action{System.String})">
            <summary>
            获取输入
            </summary>
            <param name="tishi">输入框提示</param>
            <param name="value">输入框内已有内容</param>
            <param name="callBack">回调函数</param>
            <returns></returns>
        </member>
        <member name="M:Export.Tools.Item.GetForm(System.String)">
            <summary>
            检查窗口是否已经打开
            </summary>
            <param name="formName">窗体名称</param>
            <returns></returns>
        </member>
        <member name="T:Export.Tools.ItemAdd">
            <summary>
            工具类追加函数
            </summary>
        </member>
        <member name="M:Export.Tools.ItemAdd.ToJSTime(System.DateTime)">
            <summary>
            获取js的时间戳
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Export.Tools.ItemAdd.Run(System.Action)">
            <summary>
            异步运行
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:Export.Forms.InputBox">
            <summary>
            输入框
            </summary>
        </member>
        <member name="P:Export.Forms.InputBox.value">
            <summary>
            最终返回值
            </summary>
        </member>
        <member name="M:Export.Forms.InputBox.#ctor">
            <summary>
            初始化输入框
            </summary>
        </member>
        <member name="M:Export.Forms.InputBox.#ctor(System.String)">
            <summary>
            初始化输入框
            </summary>
            <param name="tishi">提示内容</param>
        </member>
        <member name="M:Export.Forms.InputBox.#ctor(System.String,System.String)">
            <summary>
            初始化输入框
            </summary>
            <param name="tishi">提示内容</param>
            <param name="value">输入框内已有内容</param>
        </member>
        <member name="F:Export.Forms.InputBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Export.Forms.InputBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Export.Forms.InputBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Export.Forms.InputBoxAdd">
            <summary>
            输入框追加功能
            </summary>
        </member>
        <member name="M:Export.Forms.InputBoxAdd.ShowInTheCurrentScreenCenter(System.Windows.Forms.Form)">
            <summary>
            将窗体显示在当前窗口的中心
            </summary>
        </member>
        <member name="T:Export.Message">
            <summary>
            消息框
            这里使用Dispatcher来替换MonoBehaviour
            </summary>
        </member>
        <member name="F:Export.Message.UseForm">
            <summary>
            是否使用Form来获取输入
            </summary>
        </member>
        <member name="F:Export.Message.value">
            <summary>
            这里不写内容
            是丢给编译器给别人看消息用的
            </summary>
        </member>
        <member name="M:Export.Message.ChangeValue(System.String)">
            <summary>
            修改文字内容
            </summary>
            <param name="text"></param>
        </member>
        <member name="T:UnityFBXExporter.ExporterMenu">
            <summary>
            导出功能面板
            </summary>
        </member>
        <member name="M:UnityFBXExporter.ExporterMenu.ExportGameObject(UnityEngine.GameObject,System.Boolean,System.Boolean,System.String)">
            <summary>
            Exports ANY Game Object given to it. Will provide a dialog and return the path of the newly exported file
            </summary>
            <returns>The path of the newly exported FBX file</returns>
            <param name="gameObj">Game object to be exported</param>
            <param name="copyMaterials">If set to <c>true</c> copy materials.</param>
            <param name="copyTextures">If set to <c>true</c> copy textures.</param>
            <param name="oldPath">Old path.</param>
        </member>
        <member name="M:UnityFBXExporter.ExporterMenu.GetNewPath(UnityEngine.GameObject,System.String)">
            <summary>
            Creates save dialog window depending on old path or right to the /Assets folder no old path is given
            </summary>
            <returns>The new path.</returns>
            <param name="gameObject">Item to be exported</param>
            <param name="oldPath">The old path that this object was original at.</param>
        </member>
        <member name="T:UnityFBXExporter.FBXExporter">
            <summary>
            
            </summary>
        </member>
        <member name="M:UnityFBXExporter.FBXExporter.ExportGameObjToFBX(UnityEngine.GameObject,System.String,System.Boolean,System.Boolean)">
            <summary>
            将对象导出成FBX
            </summary>
            <param name="gameObj"></param>
            <param name="newPath"></param>
            <param name="copyMaterials"></param>
            <param name="copyTextures"></param>
            <returns></returns>
        </member>
        <member name="P:UnityFBXExporter.FBXExporter.VersionInformation">
            <summary>
            
            </summary>
        </member>
        <member name="M:UnityFBXExporter.FBXExporter.GetRandomFBXId">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnityFBXExporter.FBXExporter.MeshToString(UnityEngine.GameObject,System.String,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="gameObj"></param>
            <param name="newPath"></param>
            <param name="copyMaterials"></param>
            <param name="copyTextures"></param>
            <returns></returns>
        </member>
        <member name="M:UnityFBXExporter.FBXExporter.CopyComplexMaterialsToPath(UnityEngine.GameObject,System.String,System.Boolean,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="gameObj"></param>
            <param name="path"></param>
            <param name="copyTextures"></param>
            <param name="texturesFolder"></param>
            <param name="materialsFolder"></param>
        </member>
        <member name="M:UnityFBXExporter.FBXExporter.CopyAndRenameAsset(UnityEngine.Object,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="newName"></param>
            <param name="newFolderPath"></param>
            <returns></returns>
        </member>
        <member name="M:UnityFBXExporter.FBXExporter.GetFileName(System.String)">
            <summary>
            Strips the full path of a file
            </summary>
            <returns>The file name.</returns>
            <param name="path">Path.</param>
        </member>
        <member name="M:UnityFBXExporter.FBXExporter.GetTextureUpdateMaterialWithPath(UnityEngine.Material,System.String,System.String)">
            <summary>
            Copies and renames the texture and assigns it to the material provided.
            NAME FORMAT: Material.name + textureShaderName
            </summary>
            <param name="material">Material.</param>
            <param name="textureShaderName">Texture shader name.</param>
            <param name="newPath">New path.</param>
        </member>
        <member name="M:UnityFBXExporter.FBXExporter.CopyAndRenameAssetReturnObject(UnityEngine.Object,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="newName"></param>
            <param name="newFolderPath"></param>
            <returns></returns>
        </member>
        <member name="M:UnityFBXExporter.FBXExporter.FBXFormat(System.Single)">
            <summary>
             Provides internationalization for countries that use commas instead of decimals to denote the break point
            </summary>
            <param name="val">the float value you wish to convert</param>
            <returns>a string that is formated always to be 1.0 and never 1,0</returns>
        </member>
        <member name="M:UnityFBXExporter.FBXExporter.CheckForCommaInsteadOfDecimal(System.String@)">
            <summary>
            Returns a positive value if the string has a comma in it
            </summary>
        </member>
        <member name="T:UnityFBXExporter.FBXUnityMaterialGetter">
            <summary>
            
            </summary>
        </member>
        <member name="M:UnityFBXExporter.FBXUnityMaterialGetter.GetAllMaterialsToString(UnityEngine.GameObject,System.String,System.Boolean,System.Boolean,UnityEngine.Material[]@,System.String@,System.String@)">
            <summary>
            Finds all materials in a gameobject and writes them to a string that can be read by the FBX writer
            </summary>
            <param name="gameObj">Parent GameObject being exported.</param>
            <param name="newPath">The path to export to.</param>
            <param name="materials">Materials which were written to this fbx file.</param>
            <param name="matObjects">The material objects to write to the file.</param>
            <param name="connections">The connections to write to the file.</param>
            <param name="copyMaterials">The connections to write to the file.</param>
            <param name="copyTextures"></param>
        </member>
        <member name="M:UnityFBXExporter.FBXUnityMaterialGetter.SerializedTextures(UnityEngine.GameObject,System.String,UnityEngine.Material,System.String,System.Boolean,System.String@,System.String@)">
            <summary>
            Serializes textures to FBX format.
            </summary>
            <param name="gameObj">Parent GameObject being exported.</param>
            <param name="newPath">The path to export to.</param>
            <param name="material">Materials that holds all the textures.</param>
            <param name="connections">The string to connect this to the  material.</param>
            <param name="materialName"></param>
            <param name="copyTextures"></param>
            <param name="objects"></param>
        </member>
        <member name="T:UnityFBXExporter.FBXUnityMeshGetter">
            <summary>
            
            </summary>
        </member>
        <member name="M:UnityFBXExporter.FBXUnityMeshGetter.GetMeshToString(UnityEngine.GameObject,UnityEngine.Material[],System.Text.StringBuilder@,System.Text.StringBuilder@,UnityEngine.GameObject,System.Int64)">
            <summary>
            Gets all the meshes and outputs to a string (even grabbing the child of each gameObject)
            </summary>
            <returns>The mesh to string.</returns>
            <param name="gameObj">GameObject Parent.</param>
            <param name="materials">Every Material in the parent that can be accessed.</param>
            <param name="objects">The StringBuidler to create objects for the FBX file.</param>
            <param name="connections">The StringBuidler to create connections for the FBX file.</param>
            <param name="parentObject">Parent object, if left null this is the top parent.</param>
            <param name="parentModelId">Parent model id, 0 if top parent.</param>
        </member>
    </members>
</doc>
